"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const Type_1 = __importDefault(require("../design/Type"));
const RelationType_1 = require("../enums/RelationType");
class SchemasDecorators {
    static Table(name) {
        return function (target) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._tableAttribute, undefined, name !== null && name !== void 0 ? name : target.name.toLocaleLowerCase());
            Reflect.defineMetadata(SchemasDecorators._tableAttribute, name !== null && name !== void 0 ? name : target.name.toLocaleLowerCase(), target);
        };
    }
    static GetTableAttribute(target) {
        var _a;
        let meta = Reflect.getMetadata(SchemasDecorators._tableAttribute, target);
        if (!meta)
            meta = (_a = OwnMetaDataContainer.Get(target.constructor, SchemasDecorators._tableAttribute, undefined)) === null || _a === void 0 ? void 0 : _a.Value;
        return meta;
    }
    static Column(name) {
        return function (target, propertyName) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._columnAttribute, propertyName, name !== null && name !== void 0 ? name : propertyName.toLocaleLowerCase());
            Reflect.defineMetadata(SchemasDecorators._columnAttribute, name !== null && name !== void 0 ? name : propertyName.toLocaleLowerCase(), target.constructor, propertyName);
        };
    }
    static GetColumnAttribute(cTor, propertyName) {
        var _a;
        let meta = Reflect.getMetadata(SchemasDecorators._columnAttribute, cTor, propertyName);
        if (!meta)
            meta = (_a = OwnMetaDataContainer.Get(cTor, SchemasDecorators._columnAttribute, propertyName)) === null || _a === void 0 ? void 0 : _a.Value;
        return meta;
    }
    static NotNull() {
        return function (target, propertyName) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._notNullAttribute, propertyName, true);
            Reflect.defineMetadata(SchemasDecorators._notNullAttribute, true, target.constructor, propertyName);
        };
    }
    static AllowNullValue(cTor, propertyName) {
        var _a, _b;
        let meta = Reflect.getMetadata(SchemasDecorators._notNullAttribute, cTor, propertyName);
        if (meta == undefined)
            meta = (_b = (_a = OwnMetaDataContainer.Get(cTor, SchemasDecorators._notNullAttribute, propertyName)) === null || _a === void 0 ? void 0 : _a.Value) !== null && _b !== void 0 ? _b : false;
        return !meta;
    }
    static OneToOne(lazyBuilder, property) {
        return SchemasDecorators.Relation(lazyBuilder, RelationType_1.RelationType.ONE_TO_ONE, property);
    }
    static OneToMany(lazyBuilder, property) {
        return SchemasDecorators.Relation(lazyBuilder, RelationType_1.RelationType.ONE_TO_MANY, property);
    }
    static ManyToOne(lazyBuilder, property) {
        return SchemasDecorators.Relation(lazyBuilder, RelationType_1.RelationType.MANY_TO_ONE, property);
    }
    static ManyToMany(lazyBuilder, property) {
        return SchemasDecorators.Relation(lazyBuilder, RelationType_1.RelationType.MANY_TO_MANY, property);
    }
    static Relation(lazyBuilder, relation, property) {
        return function (target, propertyName) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._relationAttribute, propertyName, { TypeBuilder: lazyBuilder, Relation: relation, Field: property });
            Reflect.defineMetadata(SchemasDecorators._relationAttribute, { TypeBuilder: lazyBuilder, Relation: relation, Field: property }, target.constructor, propertyName);
        };
    }
    static GetRelationAttribute(cTor, propertyName) {
        var _a;
        let meta = Reflect.getMetadata(SchemasDecorators._relationAttribute, cTor, propertyName);
        if (!meta)
            meta = (_a = OwnMetaDataContainer.Get(cTor, SchemasDecorators._relationAttribute, propertyName)) === null || _a === void 0 ? void 0 : _a.Value;
        return meta;
    }
    static PrimaryKey() {
        return function (target, propertyName) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._primaryKeyAttribute, propertyName, true);
            Reflect.defineMetadata(SchemasDecorators._primaryKeyAttribute, true, target.constructor, propertyName);
        };
    }
    static IsPrimaryKey(cTor, propertyName) {
        var _a, _b;
        let meta = Reflect.getMetadata(SchemasDecorators._primaryKeyAttribute, cTor, propertyName);
        if (!meta)
            meta = Reflect.getMetadata(SchemasDecorators._primaryKeyAttribute, cTor.prototype, propertyName);
        if (!meta)
            meta = Reflect.getMetadata(SchemasDecorators._primaryKeyAttribute, Reflect.construct(cTor, []), propertyName);
        if (!meta)
            meta = (_b = (_a = OwnMetaDataContainer.Get(cTor, SchemasDecorators._primaryKeyAttribute, propertyName)) === null || _a === void 0 ? void 0 : _a.Value) !== null && _b !== void 0 ? _b : false;
        return meta;
    }
    static ExtractPrimaryKey(cTor) {
        for (let prop of Type_1.default.GetProperties(cTor)) {
            if (SchemasDecorators.IsPrimaryKey(cTor, prop))
                return prop;
        }
        return undefined;
    }
    static DataType(type) {
        return function (target, propertyName) {
            OwnMetaDataContainer.Set(target.constructor, SchemasDecorators._dataTypeAttribute, propertyName, type);
            Reflect.defineMetadata(SchemasDecorators._dataTypeAttribute, type, target.constructor, propertyName);
        };
    }
    static GetDataTypeAttribute(cTor, propertyName) {
        var _a;
        let value = Reflect.getMetadata(SchemasDecorators._dataTypeAttribute, cTor, propertyName);
        if (!value)
            value = (_a = OwnMetaDataContainer.Get(cTor, SchemasDecorators._dataTypeAttribute, propertyName)) === null || _a === void 0 ? void 0 : _a.Value;
        if (value === undefined)
            return undefined;
        else
            return value;
    }
}
SchemasDecorators._tableAttribute = "compile:schema-table";
SchemasDecorators._columnAttribute = "compile:schema-column";
SchemasDecorators._dataTypeAttribute = "compile:schema-dataType";
SchemasDecorators._primaryKeyAttribute = "compile:schema-primarykey";
SchemasDecorators._relationAttribute = "compile:schema-relationWith";
SchemasDecorators._notNullAttribute = "compile:schema-notNull";
exports.default = SchemasDecorators;
class OwnMetaDataContainer {
    static Get(target, key, member) {
        let meta = this._metadas.filter(s => s.Key == key && (s.CTor == target || s.CTor == target.prototype) && s.Member == member);
        if (meta && meta.length > 0)
            return meta[0];
        return undefined;
    }
    static Set(target, key, member, value) {
        let meta = this.Get(target, key, member);
        if (meta) {
            meta.Value = value;
        }
        else {
            this._metadas.push({
                CTor: target,
                Key: key,
                Member: member,
                Value: value
            });
        }
    }
}
OwnMetaDataContainer._metadas = [];
//# sourceMappingURL=SchemasDecorators.js.map