import 'reflect-metadata';
import { DBTypes } from '../enums/DBTypes';
export default class Type {
    static GetProperties(cTor: Function): string[];
    static GetDesingType(cTor: Function, propertyName: string): {
        new (...args: any[]): unknown;
    } | undefined;
    static GetDesingTimeTypeName(cTor: Function, propertyName: string): string | undefined;
    static AsArray(type: string): string;
    static InjectMetadata(object: any, metadata: {
        Field: string;
        Type: DBTypes;
        Value: any;
        Loaded: boolean;
    }): void;
    static ExtractMetadata(object: any): Parameters<typeof Type.InjectMetadata>[1][];
    static DeleteMetadata(object: any): void;
    static GetTableName(cTor: Function): string;
    static GetColumnName(cTor: Function, key: string): string;
    static HasValue(obj: any): boolean;
    static GetColumnNameAndType(cTor: Function): {
        Field: string;
        Column: string;
        Type: string;
    }[];
    static IsArray(dbType: string): boolean;
    static ExtractElementType(dbType: string): DBTypes;
    static IsDate(dbType: string): boolean;
    static IsNumber(dbType: string): boolean;
    static IsText(dbType: string): boolean;
    /**
     *
     * @method
     * @param {string} type the type from desing type to be converted to a DBTypes enum
     * @returns the DBTypes correspondent
     */
    static CastType(type: string): DBTypes;
}
//# sourceMappingURL=Type.d.ts.map