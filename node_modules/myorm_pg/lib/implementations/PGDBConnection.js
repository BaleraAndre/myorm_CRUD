"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = __importDefault(require("pg"));
const ConnectionFailException_1 = __importDefault(require("../core/exceptions/ConnectionFailException"));
const QueryFailException_1 = __importDefault(require("../core/exceptions/QueryFailException"));
const myorm_core_1 = require("myorm_core");
class PGDBConnection extends myorm_core_1.AbstractConnection {
    constructor(host, port, dababase, user, pass) {
        super();
        this.HostName = host;
        this.Port = port;
        this.DataBaseName = dababase;
        this._database = dababase;
        this.UserName = user;
        this.PassWord = pass;
        this.IsOpen = false;
    }
    AsPostgres() {
        this.DataBaseName = "postgres";
        return this;
    }
    OpenAsync() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (this.IsOpen)
                yield this.CloseAsync();
            this._conn = new pg_1.default.Client({
                host: this.HostName,
                port: this.Port,
                database: this.DataBaseName,
                user: this.UserName,
                password: this.PassWord
            });
            this.DataBaseName = this._database;
            try {
                yield this._conn.connect();
                this.IsOpen = true;
                resolve();
            }
            catch (err) {
                reject(new ConnectionFailException_1.default(err.message));
            }
        }));
    }
    QueryAsync(query) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                resolve(yield this._conn.query(query));
            }
            catch (err) {
                reject(new ConnectionFailException_1.default(err.message));
            }
        }));
    }
    CloseAsync() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this._conn.end();
                this.IsOpen = false;
                resolve();
            }
            catch (err) {
                reject(new ConnectionFailException_1.default(err.message));
            }
        }));
    }
    ExecuteNonQueryAsync(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this._conn.query(query);
                    resolve();
                }
                catch (err) {
                    reject(new QueryFailException_1.default(err.message, query));
                }
            }));
        });
    }
    ExecuteAsync(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    resolve(yield this._conn.query(query));
                }
                catch (err) {
                    reject(new QueryFailException_1.default(err.message, query));
                }
            }));
        });
    }
}
exports.default = PGDBConnection;
//# sourceMappingURL=PGDBConnection.js.map