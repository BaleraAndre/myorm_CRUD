import { AbstractManager } from 'myorm_core';
import 'reflect-metadata';
import PGDBConnection from './PGDBConnection';
import DBOperationLogHandler from '../core/handlers/DBOperationLogHandler';
export default class PGDBManager extends AbstractManager {
    private _connection;
    private _logger?;
    constructor(connection: PGDBConnection);
    CheckConnectionAsync(): Promise<boolean>;
    CheckDatabaseAsync(dababase: string): Promise<boolean>;
    CreateDataBaseAsync(dababase: string): Promise<void>;
    CheckTableAsync(cTor: Function): Promise<boolean>;
    CreateTableAsync(cTor: Function): Promise<void>;
    CheckColumnAsync(cTor: Function, key: string): Promise<boolean>;
    DropTableAsync(cTor: Function): Promise<void>;
    CheckColumnTypeAsync(cTor: Function, key: string): Promise<string>;
    ChangeColumnTypeAsync(cTor: Function, key: string): Promise<void>;
    DropColumnAsync(cTor: Function, key: string): Promise<void>;
    CreateColumnAsync(cTor: Function, key: string): Promise<void>;
    private GetTypeOfColumn;
    UpdateDatabaseForEntityAsync(cTor: Function): Promise<void>;
    ExecuteNonQueryAsync(query: string): Promise<void>;
    ExecuteAsync(query: string): Promise<any>;
    static Build(host: string, port: number, dababase: string, user: string, pass: string): PGDBManager;
    static BuildFromEnviroment(): PGDBManager;
    private CreatePromisse;
    /**
     * @private
     * @method
     * @param {string} type the desing type of class property
     * @returns {string} the postgres type correspondent
     */
    private CastToPostgreSQLType;
    SetLogger(logger: DBOperationLogHandler): void;
    private Log;
}
//# sourceMappingURL=PGDBManager.d.ts.map