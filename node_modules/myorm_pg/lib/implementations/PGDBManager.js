"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const myorm_core_1 = require("myorm_core");
require("reflect-metadata");
const TypeNotSuportedException_1 = __importDefault(require("../core/exceptions/TypeNotSuportedException"));
const Type_1 = __importDefault(require("../core/design/Type"));
const PGDBConnection_1 = __importDefault(require("./PGDBConnection"));
const SchemasDecorators_1 = __importDefault(require("../core/decorators/SchemasDecorators"));
const InvalidOperationException_1 = __importDefault(require("../core/exceptions/InvalidOperationException"));
const Index_1 = require("../Index");
const RelationType_1 = require("../core/enums/RelationType");
const DBOperationLogHandler_1 = require("../core/handlers/DBOperationLogHandler");
class PGDBManager extends myorm_core_1.AbstractManager {
    constructor(connection) {
        super();
        this._connection = connection;
    }
    CheckConnectionAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            this.Log("Checking connection", DBOperationLogHandler_1.LogType.CHECKCONNECTION);
            try {
                yield this._connection.OpenAsync();
                return true;
            }
            catch (_a) {
                return false;
            }
            finally {
                yield this._connection.CloseAsync();
            }
        });
    }
    CheckDatabaseAsync(dababase) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            this.Log(`Checking database ${dababase}`, DBOperationLogHandler_1.LogType.CHECKDATABASE);
            yield this._connection.AsPostgres().OpenAsync();
            let result = yield this._connection.ExecuteAsync(`select * from pg_database where datname = '${dababase}'`);
            return result.rows.length > 0;
        }));
    }
    CreateDataBaseAsync(dababase) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            this.Log(`Creating database ${dababase}`, DBOperationLogHandler_1.LogType.CREATEDATABASE);
            yield this._connection.AsPostgres().OpenAsync();
            yield this._connection.ExecuteAsync(`create database ${dababase} with owner ${this._connection.UserName};`);
        }));
    }
    CheckTableAsync(cTor) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            this.Log(`Checking table ${table}`, DBOperationLogHandler_1.LogType.CHECKTABLE);
            yield this._connection.OpenAsync();
            let result = yield this._connection.ExecuteAsync(`select * from information_schema.tables where table_catalog = '${this._connection.DataBaseName}' and table_name = '${table}';`);
            return result.rows.length > 0;
        }));
    }
    CreateTableAsync(cTor) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            this.Log(`Creating table ${table}`, DBOperationLogHandler_1.LogType.CREATETABLE);
            yield this._connection.OpenAsync();
            yield this._connection.ExecuteAsync(`create table if not exists "${table}"();`);
        }));
    }
    CheckColumnAsync(cTor, key) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            let column = Type_1.default.GetColumnName(cTor, key);
            this.Log(`Checking column ${table}.${column}`, DBOperationLogHandler_1.LogType.CHECKCOLUMN);
            yield this._connection.OpenAsync();
            let result = yield this._connection.ExecuteAsync(`select * from information_schema.columns where table_name = '${table}' and column_name = '${column}';`);
            return result.rows.length > 0;
        }));
    }
    DropTableAsync(cTor) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            this.Log(`Dropping table ${table}`, DBOperationLogHandler_1.LogType.CREATETABLE);
            yield this._connection.OpenAsync();
            yield this._connection.ExecuteAsync(`drop table if exists "${table}";`);
        }));
    }
    CheckColumnTypeAsync(cTor, key) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            let column = Type_1.default.GetColumnName(cTor, key);
            this.Log(`Checking column ${table}.${column} type`, DBOperationLogHandler_1.LogType.CHECKCOLUMNTYPE);
            yield this._connection.OpenAsync();
            let result = yield this._connection.ExecuteAsync(`select data_type from information_schema.columns where table_name = '${table}' and column_name = '${column}';`);
            if (result.rows.length == 0)
                return "";
            return result.rows[0]['data_type'];
        }));
    }
    ChangeColumnTypeAsync(cTor, key) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            let column = Type_1.default.GetColumnName(cTor, key);
            this.Log(`Creating column ${table}.${column}`, DBOperationLogHandler_1.LogType.CHECKCOLUMN);
            let type = this.GetTypeOfColumn(cTor, key);
            yield this._connection.OpenAsync();
            yield this._connection.ExecuteAsync(`alter table "${table}" alter column "${column}" type ${type};`);
        }));
    }
    DropColumnAsync(cTor, key) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            let column = Type_1.default.GetColumnName(cTor, key);
            this.Log(`Dropping table ${table}`, DBOperationLogHandler_1.LogType.CREATETABLE);
            yield this._connection.OpenAsync();
            yield this._connection.ExecuteAsync(`alter table "${table}" drop column "${column}";`);
        }));
    }
    CreateColumnAsync(cTor, key) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            let table = Type_1.default.GetTableName(cTor);
            let column = Type_1.default.GetColumnName(cTor, key);
            this.Log(`Creating column ${table}.${column}`, DBOperationLogHandler_1.LogType.CHECKCOLUMN);
            let type = this.GetTypeOfColumn(cTor, key);
            yield this._connection.OpenAsync();
            yield this._connection.ExecuteAsync(`alter table "${table}" add column "${column}" ${type};`);
            if (SchemasDecorators_1.default.IsPrimaryKey(cTor, key)) {
                yield this._connection.ExecuteAsync(`alter table "${table}" add constraint ${table}_${column}_pk primary key (${column});`);
            }
        }));
    }
    GetTypeOfColumn(cTor, key) {
        let type = "";
        try {
            type = this.CastToPostgreSQLType(Type_1.default.GetDesingTimeTypeName(cTor, key));
        }
        catch (ex) {
            let subType = Type_1.default.GetDesingType(cTor, key);
            let relation = SchemasDecorators_1.default.GetRelationAttribute(cTor, key);
            if (subType == undefined || subType == Array) {
                if (relation)
                    subType = relation.TypeBuilder();
                if (relation == undefined) {
                    throw new InvalidOperationException_1.default(`Can not determine the relation of porperty ${cTor.name}${key}`);
                }
            }
            let relatedKey = SchemasDecorators_1.default.ExtractPrimaryKey(subType);
            if (!relatedKey)
                throw new InvalidOperationException_1.default(`Can not determine the primary key of ${subType.name}`);
            if ((relation === null || relation === void 0 ? void 0 : relation.Relation) == RelationType_1.RelationType.ONE_TO_MANY || (relation === null || relation === void 0 ? void 0 : relation.Relation) == RelationType_1.RelationType.MANY_TO_MANY) {
                type = this.CastToPostgreSQLType(Type_1.default.AsArray(Type_1.default.GetDesingTimeTypeName(subType, relatedKey)));
            }
            else {
                type = this.CastToPostgreSQLType(Type_1.default.GetDesingTimeTypeName(subType, relatedKey));
            }
            if (type == Index_1.DBTypes.SERIAL)
                type = this.CastToPostgreSQLType(Index_1.DBTypes.INTEGER);
        }
        return type;
    }
    UpdateDatabaseForEntityAsync(cTor) {
        return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
            this.Log(`Checking entity ${cTor.name}`, DBOperationLogHandler_1.LogType.CHECKENTITY);
            let table_name = Type_1.default.GetTableName(cTor);
            if (table_name == undefined)
                throw new TypeNotSuportedException_1.default(`The type ${cTor.name} is not supported. Can not determine the table name of type`);
            yield this._connection.OpenAsync();
            if (!(yield this.CheckTableAsync(cTor)))
                yield this.CreateTableAsync(cTor);
            let columns = Type_1.default.GetProperties(cTor);
            for (let column of columns) {
                if (!(yield this.CheckColumnAsync(cTor, column))) {
                    yield this.CreateColumnAsync(cTor, column);
                }
                else {
                    let type = this.GetTypeOfColumn(cTor, column);
                    if (type == Index_1.DBTypes.SERIAL)
                        type = Index_1.DBTypes.INTEGER;
                    let dbType = yield this.CheckColumnTypeAsync(cTor, column);
                    if (type.trim().toLowerCase() != dbType.trim().toLowerCase()) {
                        yield this.ChangeColumnTypeAsync(cTor, column);
                    }
                }
            }
        }));
    }
    ExecuteNonQueryAsync(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
                yield this._connection.OpenAsync();
                this.Log(query, DBOperationLogHandler_1.LogType.QUERY);
                yield this._connection.ExecuteAsync(query);
            }));
        });
    }
    ExecuteAsync(query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.CreatePromisse(() => __awaiter(this, void 0, void 0, function* () {
                yield this._connection.OpenAsync();
                this.Log(query, DBOperationLogHandler_1.LogType.QUERY);
                return yield this._connection.ExecuteAsync(query);
            }));
        });
    }
    static Build(host, port, dababase, user, pass) {
        return new PGDBManager(new PGDBConnection_1.default(host, port, dababase, user, pass));
    }
    static BuildFromEnviroment() {
        let host = process.env.DB_HOST || "";
        let port = process.env.DB_PORT || "0";
        let username = process.env.DB_USER || "";
        let password = process.env.DB_PASS || "";
        let database = process.env.DB_NAME || "";
        let intPort = 0;
        try {
            intPort = Number.parseInt(port);
        }
        catch (_a) { }
        if (!host)
            throw new InvalidOperationException_1.default(`DB_HOST enviroment variable was no value`);
        if (!port || Number.isNaN(intPort))
            throw new InvalidOperationException_1.default(`DB_PORT enviroment variable was no value`);
        if (!username)
            throw new InvalidOperationException_1.default(`DB_USER enviroment variable was no value`);
        if (!password)
            throw new InvalidOperationException_1.default(`DB_PASS enviroment variable was no value`);
        if (!database)
            throw new InvalidOperationException_1.default(`DB_NAME enviroment variable was no value`);
        return PGDBManager.Build(host, intPort, database, username, password);
    }
    CreatePromisse(func) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let success = true;
            let result;
            try {
                result = yield func();
            }
            catch (err) {
                success = false;
                result = err;
            }
            finally {
                yield this._connection.CloseAsync();
                if (success)
                    resolve(result);
                else
                    reject(result);
            }
        }));
    }
    /**
     * @private
     * @method
     * @param {string} type the desing type of class property
     * @returns {string} the postgres type correspondent
     */
    CastToPostgreSQLType(type) {
        switch (type.toLowerCase()) {
            case "integer": return "integer";
            case "number": return "bigint";
            case "long": return "bigint";
            case "double": return "float";
            case "text": return "text";
            case "string": return "text";
            case "date": return "date";
            case "datetime": return "timestamp";
            case "boolean": return "boolean";
            case "serial": return "serial";
            case "integer[]": return "integer[]";
            case "number[]": return "bigint[]";
            case "long[]": return "bigint[]";
            case "text[]": return "text[]";
            case "string[]": return "text[]";
            case "date[]": return "date[]";
            case "datetime[]": return "timestamp[]";
            case "boolean[]": return "boolean[]";
            case "double[]": return "float[]";
            default: throw new TypeNotSuportedException_1.default(`The type ${type} is not suported`);
        }
    }
    SetLogger(logger) { this._logger = logger; }
    Log(message, type) {
        if (this._logger)
            try {
                this._logger(message, type);
            }
            catch (_a) { }
    }
}
exports.default = PGDBManager;
//# sourceMappingURL=PGDBManager.js.map