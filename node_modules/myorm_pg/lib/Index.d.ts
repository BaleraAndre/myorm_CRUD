import { DBTypes } from "./core/enums/DBTypes";
import PGDBConnection from "./implementations/PGDBConnection";
import PGDBContext from "./implementations/PGDBContext";
import PGDBManager from "./implementations/PGDBManager";
import PGDBSet from "./implementations/PGDBSet";
import QueryFailException from "./core/exceptions/QueryFailException";
import NotImpletedException from "./core/exceptions/NotImplementedException";
import TypeNotMappedException from "./core/exceptions/TypeNotMappedException";
import ConnectionFailException from "./core/exceptions/ConnectionFailException";
import ConstraintFailException from "./core/exceptions/ConstraintFailException";
import TypeNotSuportedException from "./core/exceptions/TypeNotSuportedException";
import InvalidOperationException from "./core/exceptions/InvalidOperationException";
export { ConnectionFailException };
export { ConstraintFailException };
export { InvalidOperationException };
export { NotImpletedException };
export { QueryFailException };
export { TypeNotMappedException };
export { TypeNotSuportedException };
export { DBTypes };
export { PGDBConnection };
export { PGDBContext };
export { PGDBManager };
export { PGDBSet };
export declare function Column(name?: string): (target: Object, propertyName: string) => void;
export declare function Table(name?: string): (target: Object) => void;
export declare function DataType(dbType: DBTypes): (target: Object, propertyName: string) => void;
export declare function PrimaryKey(): (target: Object, propertyName: string) => void;
export declare function OneToMany<T>(typeBuilder: () => {
    new (...args: any[]): T;
}, property?: keyof T & string): (target: Object, propertyName: string) => void;
export declare function OneToOne<T>(typeBuilder: () => {
    new (...args: any[]): T;
}, property?: keyof T & string): (target: Object, propertyName: string) => void;
export declare function ManyToMany<T>(typeBuilder: () => {
    new (...args: any[]): T;
}, property?: keyof T & string): (target: Object, propertyName: string) => void;
export declare function ManyToOne<T>(typeBuilder: () => {
    new (...args: any[]): T;
}, property?: keyof T & string): (target: Object, propertyName: string) => void;
//# sourceMappingURL=Index.d.ts.map